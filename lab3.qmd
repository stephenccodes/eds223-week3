---
title: "EDS 223: week 3"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
# Load packages
library(sf)
library(tmap)
library(tidyverse)
library(spData)
```


```{r}
nz <- spData::nz
nz_height <- spData::nz_height
canterbury <- nz %>%
  filter(Name == 'Canterbury')

tm_shape(nz) +
  tm_polygons() +
  tm_shape(canterbury) +
  tm_fill( col = "darkgrey") +
  tm_shape(nz_height) +
  tm_dots(col = "red")
```

```{r}
# Three methods to do the same thing:

# 1. Simple bracket subsetting
c_height <- nz_height[canterbury, ]

# nz_height[canterbury, ,op = st_disjoint] # all of the highest points not in canterbury

# 2. st_filter()
c_height2 <- nz_height %>%
  st_filter(y = canterbury, .predicate = st_intersects)

# 3. Creating a logical vector based on st_intersects()
nz_height_sgbp <- st_intersects(x = nz_height, y = canterbury)
nz_height_logical <- lengths(nz_height_sgbp) > 0
c_height3 <- nz_height[nz_height_logical, ]
```

```{r}
nz_height_logical <- st_is_within_distance(nz_height,
                      canterbury, 
                      dist = units::set_units(1000, "km"),
                      sparse = FALSE)

c_height4 <- nz_height[nz_height_logical, ]
```


## Spatial Joins

```{r}
st_join(nz_height, nz, join = st_intersects) %>%
  select(id = t50_fid, elevation, region = Name) %>%
  group_by(region) %>%
  summarise(n_points = n()) %>%
  st_drop_geometry()
```

```{r}
cycle_hire <- spData::cycle_hire
cycle_hire_osm <- spData::cycle_hire_osm

tmap_mode("view")

tm_shape(cycle_hire) +
  tm_symbols(col = "red", alpha = 0.2) +
  tm_shape(cycle_hire_osm) +
  tm_symbols(col = "blue", alpha = 0.2)
```

```{r}
cycle_hire_join <- st_join(cycle_hire, 
        cycle_hire_osm,
        st_is_within_distance,
        dist = units::set_units(20, "m"))
```

```{r}
# Set up a warning message to check if the join was successful
if(nrow(cycle_hire) == nrow(cycle_hire_join)) {
  print("join matches original data dimensions")
} else{
  warning("join does not match original data dimensions")
}
```

# Geometry operations
## Aggregating
```{r}
us_states <- spData::us_states

regions <- us_states %>%
  group_by(REGION) %>%
  summarise(population = sum(total_pop_15, na.rm = TRUE))

tmap_mode("plot")
tm_shape(us_states) +
  tm_polygons()


tm_shape(regions) +
  tm_polygons()

```

```{r}
us_west <- us_states[us_states$REGION == "West", ]

us_west_union <- st_union(us_west)

texas <- us_states[us_states$NAME == "Texas", ]

texas_union <- st_union(us_west_union, texas)

tm_shape(texas_union) +
  tm_polygons()

```

## Buffering
```{r}
seine <- spData::seine
seine_buffer <- st_buffer(seine, dist = 50000)

seine_union <- st_union(seine_buffer)

tm_shape(seine_union) +
  tm_polygons() +
tm_shape(seine) +
  tm_lines()
```


```{r}
nz_height_buffer <- st_buffer(nz_height, dist = 1000000)

# Same as st_filter with st_is_within_distance
c_height5 <- nz_height_buffer %>%
  st_filter(y = canterbury, .predicate = st_intersects)

# Add a warning statement
if(nrow(c_height4) == nrow(c_height5)){
  print("results matched")
} else{
  warning("results do not match")
}
```

```{r}
x <- st_sfc(st_point(c(0,1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

y <- st_sfc(st_point(c(1,1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

intersection <- st_intersection(x,y)
difference_x_y <- st_difference(x, y)
difference_y_x <- st_difference(y, x)
sym_difference <- st_sym_difference(x, y)

bbox <- st_union(x,y)

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(intersection) +
  tm_fill(col = "purple")

 tm_shape(intersection) +
  tm_fill(col = "purple")
 
tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(difference_x_y) +
  tm_fill(col = "purple")

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(difference_y_x) +
  tm_fill(col = "purple")

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(sym_difference) +
  tm_fill(col = "purple")
```

```{r}
bb <- bbox
box <- st_as_sf(bb)
p <- st_sample(x = box, size = 100) %>%
  st_as_sf()

x_and_y <- st_intersection(x,y)

p_xy1 <- p[x_and_y, ]

# Another way to make p_xy1
p_xy2 <- p %>%
  st_filter(., x_and_y)

tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue") +
  tm_shape(p_xy2) +
  tm_dots()
```

## Centroids

```{r}
nz_centroid <- st_centroid(nz)
nz_pos <- st_point_on_surface(nz)

tm_shape(nz) +
  tm_polygons() +
  tm_shape(nz_centroid) +
  tm_symbols(col = "red", alpha = 0.5) +
  tm_shape(nz_pos) +
  tm_symbols(col = "blue", alpha = 0.5)
```

# Simplification

```{r}
seine_simple <- st_simplify(seine, dTolerance = 2000)

tm_shape(seine_simple) +
  tm_lines()
```




